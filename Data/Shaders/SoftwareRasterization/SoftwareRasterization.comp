#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) uniform UniformBuffer
{
    mat4 view;
    mat4 projection;
    uint width, height;
} ubo;

layout(binding = 1) uniform sampler2D tex;
layout(binding = 2, rgba8) uniform writeonly image2D colorAttachment;

struct Vertex
{
    float x, y, z;
    float u, v;
};

float determinant(vec2 a, vec2 b, vec2 c)
{
    return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
}

void main()
{
    // Skip threads assigned to pixels outside the viewport.
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    if (all(lessThan(pixelCoord, ivec2(ubo.width, ubo.height))))
    {
        // Constant vertex attributes.
        const vec4 positions[4] = {
            vec4(-1.0f, -1.0f, 0.0f, 1.0f),
            vec4(-1.0f, 1.0f, 0.0f, 1.0f),
            vec4(1.0f, -1.0f, 0.0f, 1.0f),
            vec4(1.0f, 1.0f, 0.0f, 1.0f)
        };
    
        const vec2 texcoords[4] = {
            vec2(0.0f, 0.0f),
            vec2(0.0f, 1.0f),
            vec2(1.0f, 0.0f),
            vec2(1.0f, 1.0f)
        };

        // Triangle list indices.
        const uint indices[6] = { 0, 1, 2, 1, 3, 2 };

        // Rasterize triangles.
        for (uint i = 0; i < 6; i += 3)
        {
            // Transform vertices 
            vec4 out_Positions[3];
            vec2 out_Texcoords[3];
            vec2 v[3];
            for (uint k = 0; k < 3; ++k)
            {
                out_Positions[k] = ubo.projection * ubo.view * positions[indices[i + k]];
                out_Positions[k].xyz /= out_Positions[k].w;
                out_Texcoords[k] = texcoords[indices[i + k]];
                v[k] = floor((out_Positions[k].xy * 0.5f + 0.5f) * vec2(ubo.width, ubo.height));
            }

            // Triangle edge equation setup.
            float a01 = v[0].y - v[1].y;
            float b01 = v[1].x - v[0].x;
            float a12 = v[1].y - v[2].y;
            float b12 = v[2].x - v[1].x;
            float a20 = v[2].y - v[0].y;
            float b20 = v[0].x - v[2].x;

            // Calculate barycentric coordinates at min corner.
            vec2 minPoint = min(v[0].xy, min(v[1].xy, v[2].xy));
            float w0 = determinant(v[1], v[2], minPoint);
            float w1 = determinant(v[2], v[0], minPoint);
            float w2 = determinant(v[0], v[1], minPoint);
            
            // If pixel is inside of all edges, set pixel.
            vec2 dist = vec2(pixelCoord) - minPoint;
            w0 += (a12 * dist.x) + (b12 * dist.y);
            w1 += (a20 * dist.x) + (b20 * dist.y);
            w2 += (a01 * dist.x) + (b01 * dist.y);
        
            if (w0 >= 0.0f && w1 >= 0.0f && w2 >= 0.0f)
            {
                // Normalize barycentric coordinates.
                float area = determinant(v[0], v[1], v[2]);
                w0 /= area;
                w1 /= area;
                w2 /= area;

                // Interpolate z.
                float z = (out_Positions[0].z * w0) + (out_Positions[1].z * w1) + (out_Positions[2].z * w2);
                
                // Compute perspective correct interpolation coefficients.
                vec3 persp = vec3(w0 / out_Positions[0].w, w1 / out_Positions[1].w, w2 / out_Positions[2].w);
                persp = (1.0f / (persp.x + persp.y + persp.z)) * persp;

                // Interpolate texture coordinates.
                float u = (persp.x * out_Texcoords[0].x) + (persp.y * out_Texcoords[1].x) + (persp.z * out_Texcoords[2].x);
                float v = (persp.x * out_Texcoords[0].y) + (persp.y * out_Texcoords[1].y) + (persp.z * out_Texcoords[2].y);
                imageStore(colorAttachment, pixelCoord, texture(tex, vec2(u, v)));
            }
        }
    }
}